C-----------------------------------------------------------------------
      subroutine uservp(i,j,k,eg) ! set variable properties
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      udiff  = 0.0
      utrans = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(i,j,k,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(i,j,k,eg) ! set source term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
      e = gllel(eg)

      qvol   = 0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(i,j,k,f,eg) ! set up boundary conditions
c     NOTE ::: This subroutine MAY NOT be called by every process
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e,f,eg


      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(i,j,k,eg) ! set up initial conditions
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e,f,eg

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat   ! This routine to modify element vertices
      include 'SIZE'
      include 'TOTAL'


      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2  ! This routine to modify mesh coordinates
      include 'SIZE'
      include 'TOTAL'
      real u(lelt),v(lelt)
      integer e

      xmin = 9e21
      xmax = -9e21
      do e=1,nelt
      do i=1,2**ndim
         xmin = min(xmin,xc(i,e))
         xmax = max(xmax,xc(i,e))
      enddo
      enddo
      xmid = (xmin+xmax)/2

      call rzero(u,nelt)
      do e=1,nelt
         x=xc(1,e)
         if (x.gt.xmid) u(e)=1
         write(6,*) x,u(e),e, '  eval'
      enddo
      nxyz = nx1*ny1*nz1
      do e=1,nelt
         call cfill(t(1,1,1,e,1),u(e),nxyz)
      enddo
      call outpost(t,t,t,t,t,'   ')


      call rsb(v,u)

      nxyz = nx1*ny1*nz1
      do e=1,nelt
         call cfill(t(1,1,1,e,1),v(e),nxyz)
      enddo
      call outpost(t,t,t,t,t,'   ')
      call exitti('quit usrdat2$',nelt)

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine rsb(v,u)
      include 'SIZE'
      include 'TOTAL'

      real u(lelt),v(lelt)

      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal

      common /ivrtx/ vertex ((2**ldim)*lelt)    ! PERMANENT
      integer vertex
      common /c_is1/ glo_num(lx1*ly1*lz1*lelv)  ! TEMPORARY
      integer*8 glo_num

      integer gsh_rsb, icalld,e
      save    gsh_rsb, icalld
      data    icalld /0 /

      parameter (lc=2**ldim)
      real weights(lelt)
      save weights

      real u8(lc,lelt)
      common /ctmp0/ u8

      if (icalld.eq.0) then
         icalld=1
         nc = 2**ndim ! nc = 4 or 8

         n      = nc*nelt
         do i=1,n
            glo_num(i)=vertex(i)  ! int*4 to int*8 copy
         enddo

         call gs_setup(gsh_rsb,glo_num,n,nekcomm,np)

         call rone(weights,nelt)
         do e=1,nelt
            call cfill(u8(1,e),weights(e),lc)
         enddo

         call gs_op(gsh_rsb,u8,1,1,0)  ! +
         do e=1,nelt
            weights(e) = vlsum(u8(1,e),lc)
!            write(6, *) 'nid =',nid,' weights[',e,'] = ',weights(e) !! Thilina
         enddo

      endif

c     Compute v = Gu

!! Thilina
      call rone(u,nelt) 
      do e=1,nelt
        u(e)=e
!        write(6,*) 'u(',e,')=',u(e)
      enddo
!!! Thilina

      do e=1,nelt
         call cfill(u8(1,e),u(e),lc)
      enddo
      call gs_op(gsh_rsb,u8,1,1,0)  ! +
      do e=1,nelt
         v(e) = weights(e)*u(e) - vlsum(u8(1,e),lc)
         write(6, *) 'v(',e,')=', v(e)
      enddo

      return
      end
c-----------------------------------------------------------------------
